{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Form","_ref2","_useForm","useForm","defaultValues","repl","from","to","chec","body","register","handleSubmit","setValue","getValues","control","_useFieldArray","useFieldArray","name","repl_fields","fields","repl_append","append","repl_remove","remove","_useFieldArray2","chec_fields","chec_append","chec_remove","onSubmit","data","mailBody","getMailBody","checBody","getChecBody","result","copyToClipboard","repls","i","length","pair","split","join","checs","_x2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","text","wrap","_context2","prev","next","global","navigator","clipboard","writeText","stop","apply","arguments","_jsxs","class","children","_jsx","FormControl","_objectSpread","as","rows","cols","map","field","index","concat","Button","onClick","id","type","key","_x","_callee","_context","readOnly","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.03e0801e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\n//import './index.css';\r\nimport './App.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Button, FormControl } from 'react-bootstrap'\r\n\r\nimport { useForm, useFieldArray } from \"react-hook-form\"\r\n\r\nimport { Configuration, OpenAIApi } from \"openai\";\r\nimport kuromoji from \"kuromoji\";\r\n\r\nfunction Form() {\r\n  const { register, handleSubmit, setValue, getValues, control } = useForm({\r\n    defaultValues: {\r\n      repl: [\r\n        {\r\n            from: '',\r\n            to: ''\r\n        }\r\n      ],\r\n      chec: [\r\n        {\r\n            body: ''\r\n        }\r\n      ],\r\n    }\r\n  });\r\n  const { fields: repl_fields, append: repl_append, remove: repl_remove } = useFieldArray({\r\n    control,\r\n    name: 'repl'\r\n  });\r\n  const { fields: chec_fields, append: chec_append, remove: chec_remove } = useFieldArray({\r\n    control,\r\n    name: 'chec'\r\n  });\r\n  \r\n  const onSubmit = (data) => {\r\n    const mailBody = getMailBody(data);\r\n    const checBody = getChecBody(data);\r\n\r\n    // let result = \"```\\n\" + mailBody + \"\\n```\\n\";\r\n    // result += \"以下の項目のうち、上記の文章に含まれていない項目を挙げてください。\\n\";\r\n    // result += checBody;\r\n\r\n    let result = \"#命令書\\n\";\r\n    result += \"- 次のメール本文にチェックリストの項目が漏れなく記述されているか教えてください。\\n\\n\";\r\n    result += \"#メール本文\\n\" + mailBody + \"\\n\";\r\n    result += \"#チェックリスト\\n\" + checBody;\r\n\r\n    setValue('result', result);\r\n\r\n    copyToClipboard(result)\r\n  };\r\n\r\n  const onAPISubmit = async (data) => {\r\n    const mailBody = getMailBody(data);\r\n    const checBody = getChecBody(data);\r\n\r\n    // let result = \"```\\n\" + mailBody + \"\\n```\\n\";\r\n    // result += \"以下の項目のうち、上記の文章に含まれていない項目を挙げてください。\\n\";\r\n    // result += checBody;\r\n\r\n    let result = \"#命令書\\n\";\r\n    result += \"- 次のメール本文にチェックリストの項目が漏れなく記述されているか教えてください。\\n\\n\";\r\n    result += \"#メール本文\\n\" + mailBody + \"\\n\";\r\n    result += \"#チェックリスト\\n\" + checBody;\r\n    \r\n    setValue('apiresult', getValues('apikey'));\r\n\r\n    // const configuration = new Configuration({\r\n    //   apiKey: getValues('apikey'),\r\n    // });\r\n    // const openai = new OpenAIApi(configuration);\r\n    // const completion = await openai.createChatCompletion({\r\n    //   model: \"gpt-3.5-turbo\",\r\n    //   messages: [\r\n    //     {\r\n    //       role: \"user\",\r\n    //       content: result,\r\n    //     },\r\n    //   ],\r\n    // });\r\n    // const answer = completion.data;\r\n    // const errors = answer.split(' ');\r\n\r\n    // let divresult = \"チェック結果：\";\r\n    // let checs = getValues('chec');\r\n    // for (let i = 0; i < checs.length; i++) {\r\n    //   let chec = checs[i];\r\n    //   if (errors.contains(chec)) {\r\n    //     // エラー\r\n    //   } else {\r\n    //     // 正常\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  const getMailBody = (data) => {\r\n    let mailBody = getValues('body');\r\n    let repls = getValues('repl');\r\n    for (let i = 0; i < repls.length; i++) {\r\n      let pair = repls[i];\r\n      mailBody = mailBody.split(pair.from).join(pair.to);\r\n    }\r\n    mailBody = mailBody + \"\\n\";\r\n    return mailBody;\r\n  }\r\n\r\n  const getChecBody = (data) => {\r\n    let checBody = \"\";\r\n    let checs = getValues('chec');\r\n    for (let i = 0; i < checs.length; i++) {\r\n      let chec = checs[i];\r\n      checBody += \"- \" + chec.body + \"\\n\";\r\n    }\r\n    return checBody;\r\n  }\r\n\r\n  const copyToClipboard = async (text) => {\r\n    await global.navigator.clipboard.writeText(text);\r\n  };\r\n\r\n  return (\r\n    <div class=\"container-fluid\">\r\n      <h1>ChatGPTにメールの記入漏れを判断させる</h1>\r\n      <p><label>\r\n        本文：<br />\r\n        <FormControl as=\"textarea\" rows={10} cols={100} {...register('body')} />\r\n      </label></p>\r\n      <p>\r\n        置き換え：<br />\r\n        <table>\r\n          {repl_fields.map((field, index) => (\r\n            <tr key={field.id}>\r\n              <td><FormControl as=\"textarea\" cols={40} {...register(`repl.${index}.from`)} /></td>\r\n              <td>=&gt;</td>\r\n              <td><FormControl as=\"textarea\" cols={40} {...register(`repl.${index}.to`)} /></td>\r\n              <td><Button onClick={() => repl_remove(index)}>削除</Button></td>\r\n            </tr>\r\n          ))}\r\n          <Button type=\"button\" onClick={() => repl_append({from: '', key: ''})}>\r\n            置き換えを追加\r\n          </Button>\r\n        </table>\r\n      </p>\r\n      <p>\r\n        チェックリスト：<br />\r\n        <table>\r\n          {chec_fields.map((field, index) => (\r\n            <tr key={field.id}>\r\n              <td><FormControl type=\"text\" {...register(`chec.${index}.body`)} /></td>\r\n              <td><Button onClick={() => chec_remove(index)}>削除</Button></td>\r\n            </tr>\r\n          ))}\r\n          <Button type=\"button\" onClick={() => chec_append({body: ''})}>\r\n            チェック項目を追加\r\n          </Button>\r\n        </table>\r\n      </p>\r\n      <hr />\r\n      <p>\r\n        <h2>ChatGPT</h2>\r\n        <p>\r\n          <label>\r\n            APIキー：\r\n            <FormControl type=\"password\" {...register('apikey')} />\r\n          </label>\r\n          <Button onClick={handleSubmit(onAPISubmit)}>送信</Button>\r\n        </p>\r\n        <FormControl as=\"textarea\" rows={10} cols={100} {...register('apiresult')} readOnly />\r\n      </p>\r\n      <hr />\r\n      <p>\r\n        <h2>ChatGPT</h2>\r\n        <p>\r\n          <Button onClick={handleSubmit(onSubmit)}>出力</Button>　\r\n          <Button onClick={handleSubmit(onSubmit)}>出力してコピー</Button>\r\n        </p>\r\n        <FormControl as=\"textarea\" rows={10} cols={100} {...register('result')} />\r\n      </p>\r\n      <div class=\"footer-margin\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <Form />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}